#!/bin/bash

echo "üîç Diagnostic ContentGen Pro - Production"
echo "========================================"

# Variables
DEPLOY_DIR="/var/www/contentgen-pro"

echo "üìç Serveur: 69.62.126.243"
echo "üìÇ R√©pertoire: $DEPLOY_DIR"
echo ""

# 1. V√©rification de l'installation
echo "üìÅ 1. V√©rification des fichiers:"
if [ -d "$DEPLOY_DIR" ]; then
    echo "‚úÖ R√©pertoire d'installation trouv√©"
    echo "   - Taille: $(du -sh $DEPLOY_DIR | cut -f1)"
    echo "   - Derni√®re modification: $(stat -c %y $DEPLOY_DIR 2>/dev/null || stat -f %Sm $DEPLOY_DIR 2>/dev/null)"
    
    # V√©rifier les fichiers cl√©s
    [ -f "$DEPLOY_DIR/dist/index.html" ] && echo "‚úÖ Frontend build pr√©sent" || echo "‚ùå Frontend build manquant"
    [ -f "$DEPLOY_DIR/server/server.js" ] && echo "‚úÖ Backend pr√©sent" || echo "‚ùå Backend manquant"
    [ -f "$DEPLOY_DIR/.env" ] && echo "‚úÖ Fichier .env trouv√©" || echo "‚ùå Fichier .env manquant"
    
    if [ -f "$DEPLOY_DIR/.env" ]; then
        echo "   Configuration .env:"
        cat "$DEPLOY_DIR/.env" | sed 's/^/     /'
    fi
else
    echo "‚ùå R√©pertoire d'installation non trouv√©"
fi

echo ""

# 2. V√©rification Git
echo "üîÑ 2. Status Git:"
if [ -d "$DEPLOY_DIR/.git" ]; then
    cd "$DEPLOY_DIR"
    echo "   Branche actuelle: $(git branch --show-current)"
    echo "   Dernier commit: $(git log -1 --oneline)"
    echo "   Status: $(git status --porcelain | wc -l) fichiers modifi√©s"
else
    echo "‚ùå Pas de repository Git trouv√©"
fi

echo ""

# 3. V√©rification des services
echo "üîß 3. Status des services:"

# PM2
if command -v pm2 &> /dev/null; then
    echo "üìä PM2:"
    pm2 status | grep contentgen || echo "   ‚ùå Aucun processus contentgen trouv√©"
else
    echo "‚ùå PM2 non install√©"
fi

# Nginx
if command -v nginx &> /dev/null; then
    echo "üåê Nginx:"
    if systemctl is-active --quiet nginx; then
        echo "   ‚úÖ Service actif"
    else
        echo "   ‚ùå Service inactif"
    fi
    
    # Test de configuration
    nginx -t &>/dev/null && echo "   ‚úÖ Configuration valide" || echo "   ‚ùå Erreur de configuration"
else
    echo "‚ùå Nginx non install√©"
fi

echo ""

# 4. Tests de connectivit√©
echo "üåê 4. Tests de connectivit√©:"

# Backend
echo "üîå Backend (port 3001):"
if curl -f http://localhost:3001/api/health &>/dev/null; then
    echo "   ‚úÖ API accessible"
    # Test login
    LOGIN_TEST=$(curl -s -X POST http://localhost:3001/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"username":"admin","password":"admin123"}' | jq -r '.message' 2>/dev/null)
    if [ "$LOGIN_TEST" = "Connexion r√©ussie" ]; then
        echo "   ‚úÖ Authentification fonctionnelle"
    else
        echo "   ‚ùå Probl√®me d'authentification"
    fi
else
    echo "   ‚ùå API non accessible"
fi

# Frontend
echo "üé® Frontend (port 80):"
if curl -f http://localhost/ &>/dev/null; then
    echo "   ‚úÖ Frontend accessible"
else
    echo "   ‚ùå Frontend non accessible"
fi

# Externe
echo "üåç Acc√®s externe:"
EXTERNAL_TEST=$(curl -s -o /dev/null -w "%{http_code}" http://69.62.126.243/ 2>/dev/null)
if [ "$EXTERNAL_TEST" = "200" ]; then
    echo "   ‚úÖ Accessible depuis l'ext√©rieur (HTTP $EXTERNAL_TEST)"
else
    echo "   ‚ùå Non accessible depuis l'ext√©rieur (HTTP $EXTERNAL_TEST)"
fi

echo ""

# 5. V√©rification des logs
echo "üìã 5. Logs r√©cents:"

if [ -f "/var/log/contentgen/error.log" ]; then
    echo "‚ùó Erreurs backend (5 derni√®res):"
    tail -5 /var/log/contentgen/error.log | sed 's/^/   /'
fi

if [ -f "/var/log/nginx/error.log" ]; then
    echo "‚ùó Erreurs Nginx (5 derni√®res):"
    tail -5 /var/log/nginx/error.log | sed 's/^/   /'
fi

echo ""

# 6. V√©rification des ports
echo "üîå 6. Ports en √©coute:"
netstat -tulpn 2>/dev/null | grep -E ':(80|3001|443)\s' | sed 's/^/   /' || ss -tulpn | grep -E ':(80|3001|443)\s' | sed 's/^/   /'

echo ""

# 7. Ressources syst√®me
echo "üíª 7. Ressources syst√®me:"
echo "   CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)% utilis√©"
echo "   RAM: $(free -h | awk 'NR==2{printf "%.1f%%", $3*100/$2}' 2>/dev/null || echo "N/A")"
echo "   Disque: $(df -h / | awk 'NR==2{print $5}' | cut -d'%' -f1)% utilis√©"

echo ""
echo "üîß R√©sum√© des probl√®mes potentiels:"

# Diagnostic automatique
ISSUES=0

[ ! -d "$DEPLOY_DIR/dist" ] && echo "   ‚ùå Build frontend manquant" && ISSUES=$((ISSUES+1))
[ ! -f "$DEPLOY_DIR/.env" ] && echo "   ‚ùå Configuration .env manquante" && ISSUES=$((ISSUES+1))

if ! curl -f http://localhost:3001/api/health &>/dev/null; then
    echo "   ‚ùå Backend non accessible - v√©rifier PM2"
    ISSUES=$((ISSUES+1))
fi

if ! curl -f http://localhost/ &>/dev/null; then
    echo "   ‚ùå Frontend non accessible - v√©rifier Nginx"
    ISSUES=$((ISSUES+1))
fi

if [ $ISSUES -eq 0 ]; then
    echo "   ‚úÖ Aucun probl√®me d√©tect√©"
else
    echo ""
    echo "üí° Solutions recommand√©es:"
    echo "   1. Ex√©cuter: ./deploy-production.sh"
    echo "   2. V√©rifier les logs: pm2 logs contentgen-backend"
    echo "   3. Red√©marrer les services: systemctl restart nginx && pm2 restart contentgen-backend"
fi

echo ""
echo "üìû Support:"
echo "   - Logs PM2: pm2 logs contentgen-backend"
echo "   - Logs Nginx: tail -f /var/log/nginx/error.log"
echo "   - Status services: systemctl status nginx && pm2 status"